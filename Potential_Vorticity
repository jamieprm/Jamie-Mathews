#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Oct  2 10:59:05 2020

@author: jamiemathews
"""


# =============================================================================
# The computation of the potential vorticity using the NEMO model
# =============================================================================

import numpy as np
import matplotlib.pyplot as plt
#import numpy.ma as ma
from nemo_subroutines import expnd
from nemo_subroutines import null
from nemo_subroutines import cor
from nemo_subroutines import calc_rho
from nemo_subroutines import calc_sigma0
from nemo_subroutines import calc_vortyz
from nemo_subroutines import calc_vortyy
from nemo_subroutines import calc_vortyx
from nemo_subroutines import calc_PVt

# =============================================================================
# Importing varriables:
# Choose d= 1,2,3 for long term average of 5 day average one or two in the Western
# Boundary Current and choose 4 for the southern hemisphere. 5 for WBC large domain 
# =============================================================================

d=1

if d==1:
    [A,B,C,D]=['HGRnemo.npy','ZGRnemo.npy','TRAnemo.npy','DYNnemo.npy']
elif d==2:
    [A,B,C,D]=['HGRnemo_dp5.npy','ZGRnemo_dp5.npy','TRAnemo_dp5.npy','DYNnemo_dp5.npy']
elif d==3:
    [A,B,C,D]=['HGRnemo_dm5.npy','ZGRnemo_dm5.npy','TRAnemo_dm5.npy','DYNnemo_dm5.npy']
elif d==4:
    [A,B,C,D]=['HGRnemoS.npy','ZGRnemoS.npy','TRAnemoS.npy','DYNnemoS.npy']
elif d==5:
    [A,B,C,D]=['HGRnemo_big.npy','ZGRnemo_big.npy','TRAnemo_big.npy','DYNnemo_big.npy']

[glamt, gphit, glamu, gphiu, glamv, gphiv, glamf, gphif, e1t, e2t, e1u, e2u, e1v, e2v, e1f, e2f] = np.load(A,allow_pickle=True)
[gdept, gdepu, gdepv, gdepw, e3t, e3u, e3v, e3w, mbathy] = np.load(B,allow_pickle=True)
[T, S] = np.load(C)
[U, V, W] = np.load(D)


#choosing level
ko=24   #depth
lo=50   #longitude
la=20   #latitude

#turning e1,2 into type 3 type tensors
e1u=expnd(e1u, len(e3t))
e1v=expnd(e1v, len(e3t))
e1f=expnd(e1f, len(e3t))
e1t=expnd(e1t, len(e3t))
e2u=expnd(e2u, len(e3t))
e2v=expnd(e2v, len(e3t))
e2f=expnd(e2f, len(e3t))
e2t=expnd(e2t, len(e3t))

#Assigning scale varriables at all points
e1fw=e1f
e2fw=e2f
e3fw=e3w
e1vw=e1v
e2vw=e2v
e3vw=e3w
e1uw=e1u
e2uw=e2u
e3uw=e3w
e3f=e3t

#assigning null points to land points
land=T/T
U=U*land
V=V*land
W=W*land

#Calculating Pressure and Density
Pt=gdept
RHO=calc_rho(S, T, Pt)
SIG=calc_sigma0(S, T)
SIG=SIG*land    #creating null points at land points
RHO=RHO*land

#coriolis parameter
[f,b]=cor(gphif)    #defined on fw points
f=expnd(f, len(e3t))    #turning into 3 tensors
b=expnd(b, len(e3t))

# =============================================================================
# Calculating the vorticities
# =============================================================================

gvori=calc_vortyx(V, np.zeros(np.shape(e3t)), e2vw, e3vw) #w=0
gvorj=calc_vortyy(U, np.zeros(np.shape(e3t)), e1uw, e3uw) #w=0
gvork=calc_vortyz(U, V, e1u, e2v, e1f, e2f)

# =============================================================================
# Calculaing the potential vorticity 
# =============================================================================

#Ertel's potentoal vorticity
[PV,PVi,PVj,PVk]=calc_PVt(gvori, gvorj+b, gvork+f, e1vw, e2uw, e3f, RHO, SIG)

#Planetary geostrophic potential vorticity
[PVf,PVfi,PVfj,PVfk]=calc_PVt(np.zeros(np.shape(e3t)),np.zeros(np.shape(e3t)), f, e1vw, e2uw, e3f, RHO, SIG)

# =============================================================================
# #Plotting the PV for the WBC
# =============================================================================

#Choosing min/max + contour plot levels
minim=20
maxim=-1
thickness=0.3
levels = np.arange(1024.0, 1027, thickness)

#Creating 3 tensor grid
glamtp=expnd(glamf, len(e3t))
gphitp=expnd(gphif, len(e3t))
gdeptp=-np.flip(gdept,0)#flipping depth axis
PVp=np.flip(PV,0)       #flipping PV in z direction


#lat-long plots

plt.figure(1)
#plotting isopycnals
sfield=np.ma.array(SIG[ko,:,:])
CTP=plt.contour(glamf,gphif,sfield,colors='white',levels=levels)#SIG contour plt
plt.clabel(CTP,inline=thickness, fontsize=10,fmt='%1.1f')
#plotting colour mesh
field = np.ma.array(PV[ko,:,:])*1e10
field[np.isnan(field)] = np.ma.masked
C=plt.pcolormesh(glamt,gphit,field,cmap='jet',vmin=minim,vmax=maxim) #PV colourplt
cbar=plt.colorbar(C)
cbar.set_label('PV ',rotation=270,labelpad=20, y=0.45)
#labeling
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.title('PV for the Western Boundary Current at depth '+str(gdepw[ko,0,0]))
plt.show()


#East to West Plots

plt.figure(2)
#plotting isopycnals
sfield=np.ma.array(np.flip(SIG[:,la,:],0))
CTP=plt.contour(glamtp[:,la,:],gdeptp[:,la,:],sfield,colors='white',levels=levels)
plt.clabel(CTP,inline=thickness, fontsize=10,fmt='%1.1f')
#plotting colour mesh
field = np.ma.array(PVp[:,la,:])*1e10
field[np.isnan(field)] = np.ma.masked
C=plt.pcolormesh(glamtp[:,la,:],gdeptp[:,la,:],field,cmap='nipy_spectral',vmin=minim,vmax=maxim) 
cbar=plt.colorbar(C)
cbar.set_label('PV ',rotation=270,labelpad=20, y=0.45)
plt.ylim(-800,0)
#labeling
plt.xlabel('Longitude')
plt.ylabel('Depth')
plt.title('PV for the Western Boundary Current at Latitude '+str(gphit[la,0]))
plt.show()


#South to North Plot

plt.figure(3)
sfield=np.ma.array(np.flip(SIG[:,:,lo],0))
CTP=plt.contour(gphitp[:,:,lo],gdeptp[:,:,lo],sfield,colors='white',levels=levels)
plt.clabel(CTP,inline=thickness, fontsize=10,fmt='%1.1f')
field = np.ma.array(PVp[:,:,lo])*1e10
field[np.isnan(field)] = np.ma.masked
minim=np.min(field)
maxim=np.max(field)
C=plt.pcolormesh(gphitp[:,:,lo],gdeptp[:,:,lo],field,cmap='nipy_spectral',vmin=-1,vmax=15) 
cbar=plt.colorbar(C)
cbar.set_label('PV ',rotation=270,labelpad=20, y=0.45)
plt.ylim(-800,0)
plt.xlabel('Latitude')
plt.ylabel('Depth')
plt.title('PV for the Western Boundary Current at Longitude '+str(glamt[0,lo]))
plt.show()

